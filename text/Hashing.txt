Hashing: hashing Hashing in Java is a technique for mapping data to a secret key, that can be used as a unique identifier for data.

-for example let say we have array

int [] arr = {1,2,3,1,2,4,55,3,4}

and we want to know how many time number is present in given arr basically count 

we can simply run for loop and say
int count =0;
for(int i=0;i<arr.length;i++){
    if(arr[i]== number){
        return count++;
    }
}
- what this does this will travel through array every time we need to find how many times given "Number" appears in array.
- for each input it will run array.length times, let say n times,
and say inputs are q numbers of input. 
- that means we want to search n times for q numbers
TC = O(q*n)
- guess we have array of 10000 elements and somewhere near abt 10k inputs to search( you so the maths)

//Now what hashing do is it actually run through array for first time and count value as an index in hash array and increase value of that hash[index] every time that arr value appears
- in simple word value of main array act as index of hash array, and value of hash array for that index get increased every time we incounter same number
- let say in our example 
arr[0] = 1 
hash[arr[0]]=hash[1] .............A
and at index 1 in hash increment happens 
also
arr[3]=1
hash[arr[3]]=hash[1] .............B
here also index of hash array is 1 , so again at that index value will be increased by 1
-i.e. now hash[1]= 2 
and that many time 1 appears in arr
- This is nothing but "precomputation". 

//Size array
- maximum size we can declare in main for int is 10^6 , if we declare more than that will return segmentation error
- Globally we can declare till 10^7(1e7)

//INCASE OF STRING
- creating hash index for int array is easy cuz we can just create int hash array and its index will be values of int array.
- But how we create hash table for sting. say there is a string "asdaefafssde" and we want to know how many times perticular charater comes in given string
- this is when ASCII value comes in picture.
- what is ASCII value?
    An ASCII value is a number that represents a character variable. The ASCII table has 128 characters, with values from 0 to 127. For example, the ASCII value of 'A' is 65
- in ASCII values "a" to "z" comes in range of 97 to 122 and "A" to "Z" comes between 65 to 90.
- so our hashing array would be of size 256 if sting contains both lower and upper case 
- if string only contains lower case create hash array of size 26 and give hash[char -"a"], This will give us index for that character in hash array of 26
- for example, let say a is character for which we need index. so according to above formula system will take ASCII value of a= 97 and a=97 and index will be [char - "a"] = [97-97]=[0] 

//HASHMAP
- what is problem in Hashing?
 when we want to create hash array to store the frequency of numebrs in array we need to create hash array size of largest number in array or in input.
 e.g. [1,2,3,8,12]
 in this we need to create array of size[large num +1] ie 13. 
 -even though we know there are only 5 numbers in array we need to create hash array of 13 to store frequency of 12.
 -this is when hashmap comes in picture.

- what is Hashmap?
  Hashmap is nothing structure which store key and values. 
  so in above case key will be arr[index](value of array) and value will be something which we want to store for that key. ie frequency in above case 
 map will contain something like this 
 [ 1 -> 1
   2 -> 1
   3 -> 1
   8 -> 1
   12-> 1
]

 what happened here is we don't need array of 13 to store frequency. we just take 5 keys and assign them values. In this case keys are value 1,2,3,8,12
and values for these keys are there count

- structure of map in Java
        Map<data_type_ofkey,data_type_value> map = new HashMap<>();

    map.put(key, value)// to store value for key in map
    map.get(key)// to get value for that key


- while doing map for string we don't need ASCII value here we can just give character as key in map and it count will be value.
 

 - Unorderd map
 for most of hashmap cases avg and best case have Time complexicity of O(1) i.e. constant. there fore we can use unorderd map in it. cuz in map structure  storing and fetching from hashmap it take log(n) time complexicity
 - Only when it fails we can move to Map from unorderdMap

 Collision(worst case of mapping)
  - say there is array of number with 139 is largest number in array. and we want to create hash array for it. so will create array of 140 size.
  - But there is condition hash array should have only 10 values i.e. size must be 10.
  - in such cases we use different methods like division method.
  where we find module of number by (num%10) and use it as index and store its frequency at that hash[Module]
  - say there are numbers 2,12,32,42,72,102 are present in array.so for all these number num%10== 2; so all these number get stored at index 2 in hash array this is nothing but Collision.
 

